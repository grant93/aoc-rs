use crate::aoc2019::intcode::intcode;
use rstest::rstest;

fn partone(input: Vec<i64>) -> i64 {
    let mut vec = Vec::new();
    let mut vec2 = Vec::new();
    let mut vm = intcode::VirtualMachine::new(input);
    vm.run(&mut vec, &mut vec2)
}

fn parttwo(input: Vec<i64>) -> i64 {
    let mut vec = Vec::new();
    let mut vec2 = Vec::new();
    let mut x = 0;
    while x < 100 {
        let mut y = 0;
        while y < 100 {
            let mut a = input.clone();
            a[1] = x;
            a[2] = y;
            let z = intcode::VirtualMachine::new(a).run(&mut vec, &mut vec2);
            if z == 19690720 {
                return (100 * x) + y;
            }
            y += 1;
        }
        x += 1;
    }
    69
}

#[cfg(test)]
mod tests {
    use super::*;

    #[rstest]
    #[case(vec![1,9,10,3,2,3,11,0,99,30,40,50], 3500)]
    #[case(vec![1,0,0,0,99], 2)]
    #[case(vec![2,3,0,3,99], 2)]
    #[case(vec![1,1,1,4,99,5,6,0,99], 30)]
    #[case(vec![1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,9,19,23,1,23,5,27,2,27,10,31,1,6,31,35,1,6,35,39,2,9,39,43,1,6,43,47,1,47,5,51,1,51,13,55,1,55,13,59,1,59,5,63,2,63,6,67,1,5,67,71,1,71,13,75,1,10,75,79,2,79,6,83,2,9,83,87,1,5,87,91,1,91,5,95,2,9,95,99,1,6,99,103,1,9,103,107,2,9,107,111,1,111,6,115,2,9,115,119,1,119,6,123,1,123,9,127,2,127,13,131,1,131,9,135,1,10,135,139,2,139,10,143,1,143,5,147,2,147,6,151,1,151,5,155,1,2,155,159,1,6,159,0,99,2,0,14,0], 6627023)]
    fn partone_test(#[case] input: Vec<i64>, #[case] expected: i64) {
        assert_eq!(expected, partone(input))
    }

    #[rstest]
    #[case(vec![1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,9,19,23,1,23,5,27,2,27,10,31,1,6,31,35,1,6,35,39,2,9,39,43,1,6,43,47,1,47,5,51,1,51,13,55,1,55,13,59,1,59,5,63,2,63,6,67,1,5,67,71,1,71,13,75,1,10,75,79,2,79,6,83,2,9,83,87,1,5,87,91,1,91,5,95,2,9,95,99,1,6,99,103,1,9,103,107,2,9,107,111,1,111,6,115,2,9,115,119,1,119,6,123,1,123,9,127,2,127,13,131,1,131,9,135,1,10,135,139,2,139,10,143,1,143,5,147,2,147,6,151,1,151,5,155,1,2,155,159,1,6,159,0,99,2,0,14,0], 4019)]
    fn parttwo_test(#[case] input: Vec<i64>, #[case] expected: i64) {
        assert_eq!(expected, parttwo(input))
    }
}
